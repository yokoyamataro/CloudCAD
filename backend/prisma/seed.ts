import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding database...');

  // 1. „É¶„Éº„Ç∂„Éº‰ΩúÊàê
  const user = await prisma.user.upsert({
    where: { email: 'admin@cloudcad.com' },
    update: {},
    create: {
      email: 'admin@cloudcad.com',
      name: '„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ',
      password: 'hashedpassword123', // ÂÆüÈöõ„ÅØ„Éè„ÉÉ„Ç∑„É•ÂåñÂøÖË¶Å
      role: 'admin',
    },
  });

  console.log('üë§ „É¶„Éº„Ç∂„Éº‰ΩúÊàê:', user.name);

  // 2. „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê
  const project = await prisma.project.upsert({
    where: { id: '1' },
    update: {},
    create: {
      id: '1',
      name: 'Âú∞Á±çË™øÊüª„ÉÜ„Çπ„Éà„Éó„É≠„Ç∏„Çß„ÇØ„Éà',
      description: 'Â∫ßÊ®ôÁÆ°ÁêÜÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„ÉàÁî®„Éó„É≠„Ç∏„Çß„ÇØ„Éà',
      surveyArea: 'Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫',
      coordinateSystem: 'JGD2000',
      units: 'm',
      boundingBox: '{"minX": 0, "minY": 0, "maxX": 1000, "maxY": 1000}',
    },
  });

  console.log('üìÅ „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê:', project.name);

  // 3. „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É¶„Éº„Ç∂„ÉºÈñ¢ÈÄ£‰ªò„Åë
  await prisma.projectUser.upsert({
    where: {
      userId_projectId: {
        userId: user.id,
        projectId: project.id,
      },
    },
    update: {},
    create: {
      userId: user.id,
      projectId: project.id,
      role: 'admin',
    },
  });

  // 4. Ê∏¨ÈáèÁÇπ„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„Çø‰ΩúÊàê
  const surveyPoints = [
    {
      pointNumber: 'BP-001',
      pointType: 'boundary_point',
      x: 100.123,
      y: 200.456,
      elevation: 45.67,
      measureDate: new Date('2024-01-15'),
      surveyorName: 'Áî∞‰∏≠Ê∏¨ÈáèÂ£´',
      remarks: '„Ç≥„É≥„ÇØ„É™„Éº„ÉàÂ¢ÉÁïåÊù≠',
      stakeType: '„Ç≥„É≥„ÇØ„É™„Éº„ÉàÊù≠',
      installationCategory: 'Êó¢Ë®≠',
      projectId: project.id,
      createdBy: user.id,
    },
    {
      pointNumber: 'BP-002',
      pointType: 'boundary_point',
      x: 150.789,
      y: 250.012,
      elevation: 46.12,
      measureDate: new Date('2024-01-15'),
      surveyorName: 'Áî∞‰∏≠Ê∏¨ÈáèÂ£´',
      remarks: 'ÈáëÂ±ûÊ®ô',
      stakeType: 'ÈáëÂ±ûÊ®ô',
      installationCategory: 'Êó¢Ë®≠',
      projectId: project.id,
      createdBy: user.id,
    },
    {
      pointNumber: 'CP-001',
      pointType: 'control_point',
      x: 125.456,
      y: 225.789,
      elevation: 45.89,
      measureDate: new Date('2024-01-16'),
      surveyorName: '‰ΩêËó§Ê∏¨ÈáèÂ£´',
      remarks: 'GPSÂà∂Âæ°ÁÇπ',
      stakeType: 'ÈáëÂ±ûÈã≤',
      installationCategory: 'Êñ∞Ë®≠',
      projectId: project.id,
      createdBy: user.id,
    },
  ];

  for (const pointData of surveyPoints) {
    const point = await prisma.surveyPoint.upsert({
      where: {
        projectId_pointNumber: {
          projectId: pointData.projectId,
          pointNumber: pointData.pointNumber,
        },
      },
      update: {},
      create: pointData,
    });
    console.log('üìç Ê∏¨ÈáèÁÇπ‰ΩúÊàê:', point.pointNumber);
  }

  // 5. Âú∞Ê®©ËÄÖ„Éá„Éº„Çø‰ΩúÊàê
  const landowners = [
    {
      name: 'Â±±Áî∞Â§™ÈÉé',
      address: 'Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫Èúû„ÅåÈñ¢1-2-3',
      phoneNumber: '03-1234-5678',
      email: 'yamada@example.com',
      birthDate: new Date('1965-05-15'),
      remarks: '‰∏ªË¶ÅÂú∞Ê®©ËÄÖ',
      projectId: project.id,
    },
    {
      name: 'Èà¥Êú®Ëä±Â≠ê',
      address: 'Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫Èúû„ÅåÈñ¢1-2-4', 
      phoneNumber: '03-8765-4321',
      email: 'suzuki@example.com',
      birthDate: new Date('1970-08-20'),
      remarks: 'Èö£Êé•Âú∞Ê®©ËÄÖ',
      projectId: project.id,
    },
  ];

  const createdLandowners: { [key: string]: any } = {};
  for (const landownerData of landowners) {
    const landowner = await prisma.landowner.upsert({
      where: {
        projectId_name: {
          projectId: landownerData.projectId,
          name: landownerData.name,
        },
      },
      update: {},
      create: landownerData,
    });
    createdLandowners[landowner.name] = landowner;
    console.log('üë§ Âú∞Ê®©ËÄÖ‰ΩúÊàê:', landowner.name);
  }

  // 6. Âú∞Áï™„Éá„Éº„Çø‰ΩúÊàê
  const landParcels = [
    {
      parcelNumber: '123-1',
      address: 'Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫Èúû„ÅåÈñ¢1-2-3',
      area: 250.75,
      landUse: 'ÂÆÖÂú∞',
      owner: 'Â±±Áî∞Â§™ÈÉé',
      landOwnerId: createdLandowners['Â±±Áî∞Â§™ÈÉé'].id,
      geometry: 'POLYGON((100.123 200.456, 150.789 250.012, 125.456 225.789, 100.123 200.456))',
      coordinatePoints: '["BP-001", "BP-002", "CP-001"]',
      registrationDate: new Date('2020-03-15'),
      remarks: 'ËßíÂú∞Áâ©‰ª∂',
      projectId: project.id,
    },
    {
      parcelNumber: '123-2',
      address: 'Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫Èúû„ÅåÈñ¢1-2-4',
      area: 180.25,
      landUse: 'ÂÆÖÂú∞',
      owner: 'Èà¥Êú®Ëä±Â≠ê',
      landOwnerId: createdLandowners['Èà¥Êú®Ëä±Â≠ê'].id,
      geometry: 'POLYGON((150.789 250.012, 180.123 280.456, 160.456 260.789, 150.789 250.012))',
      coordinatePoints: '["BP-002"]',
      registrationDate: new Date('2019-11-20'),
      remarks: '‰ΩèÂÆÖÁî®Âú∞',
      projectId: project.id,
    },
  ];

  for (const parcelData of landParcels) {
    const parcel = await prisma.landParcel.upsert({
      where: {
        projectId_parcelNumber: {
          projectId: parcelData.projectId,
          parcelNumber: parcelData.parcelNumber,
        },
      },
      update: {},
      create: parcelData,
    });
    console.log('üè† Âú∞Áï™‰ΩúÊàê:', parcel.parcelNumber);
  }

  console.log('‚úÖ „Ç∑„Éº„ÉâÂÆå‰∫ÜÔºÅ');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå „Ç∑„Éº„Éâ„Ç®„É©„Éº:', e);
    await prisma.$disconnect();
    process.exit(1);
  });