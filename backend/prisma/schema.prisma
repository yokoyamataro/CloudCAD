generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  name          String
  password      String
  role          String           @default("user")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  drawings      Drawing[]
  modifications DrawingElement[]
  projects      ProjectUser[]
  surveyPoints  SurveyPoint[]
}

model Project {
  id               String          @id @default(cuid())
  name             String
  description      String?
  surveyArea       String?
  coordinateSystem String          @default("JGD2000")
  units            String          @default("m")
  boundingBox      String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  drawings         Drawing[]
  landParcels      LandParcel[]
  landowners       Landowner[]
  layers           Layer[]
  users            ProjectUser[]
  surveyPoints     SurveyPoint[]
  options          ProjectOption[]
}

model ProjectUser {
  id        String  @id @default(cuid())
  userId    String
  projectId String
  role      String  @default("viewer")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Layer {
  id        String           @id @default(cuid())
  name      String
  color     String           @default("#000000")
  lineType  String           @default("CONTINUOUS")
  lineWidth Float            @default(1.0)
  visible   Boolean          @default(true)
  locked    Boolean          @default(false)
  projectId String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  elements  DrawingElement[]
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
}

model Drawing {
  id        String           @id @default(cuid())
  name      String
  version   Int              @default(1)
  sxfData   String?
  metadata  String?
  projectId String
  authorId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  author    User             @relation(fields: [authorId], references: [id])
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  elements  DrawingElement[]
}

model DrawingElement {
  id         String   @id @default(cuid())
  type       String
  geometry   String
  properties String?
  style      String?
  layerId    String?
  drawingId  String?
  visible    Boolean  @default(true)
  locked     Boolean  @default(false)
  createdBy  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  creator    User?    @relation(fields: [createdBy], references: [id])
  drawing    Drawing? @relation(fields: [drawingId], references: [id], onDelete: Cascade)
  layer      Layer?   @relation(fields: [layerId], references: [id])

  @@index([type])
  @@index([layerId])
  @@index([drawingId])
}

model SurveyPoint {
  id                   String    @id @default(cuid())
  pointNumber          String
  pointType            String
  x                    Float     // X座標
  y                    Float     // Y座標
  elevation            Float?    // Z座標（標高）
  accuracy             String?
  measureMethod        String?
  measureDate          DateTime? @db.Date
  surveyorName         String?
  remarks              String?
  stakeType            String?   // 杭種 (木杭・金属鋲・金属標・石標・プラスチック杭・コンクリート杭・マーキング・刻印)
  installationCategory String?   // 設置区分 (既設・新設・復元・入替)
  projectId            String
  createdBy            String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  creator              User?     @relation(fields: [createdBy], references: [id])
  project              Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, pointNumber])
  @@index([x, y])  // 座標検索用インデックス
}

model Landowner {
  id          String   @id @default(cuid())
  name        String   // 地権者名
  address     String?  // 住所
  phoneNumber String?  // 電話番号
  email       String?  // メールアドレス
  birthDate   DateTime? @db.Date // 生年月日
  idNumber    String?  // 身分証明書番号等
  remarks     String?  // 備考
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  landParcels LandParcel[] // 所有する土地の関連

  @@unique([projectId, name])
}

model LandParcel {
  id              String     @id @default(cuid())
  parcelNumber    String     // 地番
  address         String?    // 所在地
  area            Float?     // 面積（㎡）
  landUse         String?    // 地目
  owner           String?    // 所有者（廃止予定）
  landOwnerId     String?    // 地権者ID
  geometry        String?    // WKT形式のPolygon
  coordinatePoints String?   // 構成座標点のIDリスト（JSON配列）
  registrationDate DateTime? @db.Date
  remarks          String?
  projectId        String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  landowner        Landowner? @relation(fields: [landOwnerId], references: [id])
  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, parcelNumber])
}

model EditSession {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  socketId  String   @unique
  cursor    String?
  selection String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
}

model ChangeHistory {
  id         String   @id @default(cuid())
  type       String
  objectType String
  objectId   String
  oldData    String?
  newData    String?
  userId     String
  projectId  String
  timestamp  DateTime @default(now())

  @@index([projectId, timestamp])
  @@index([objectType, objectId])
}

model ProjectOption {
  id        String   @id @default(cuid())
  projectId String
  category  String   // "stake_type" or "installation_category"
  value     String
  label     String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, category, value])
}

